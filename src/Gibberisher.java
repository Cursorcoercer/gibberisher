/**
 * Implements a gibberish generator.
 * This class can generate pronounceable gibberish by first training a model Trie
 * on sequences of characters from real words, and assigning a CharBag to each node
 * of possible characters that can follow particular sequences.
 *
 * @author  Peter Weiblen
 */

public class Gibberisher {
    private Trie<CharBag> model;
    private int segmentLen;
    private int sampleCount;

    /**
     * Class constructor that specifies the segment length which the model will work with,
     * and initializes an empty CharBag Trie, which is the model, and initializes a count
     * of how much training it's done to 0.
     */
    public Gibberisher(int segmentLen) {
        this.segmentLen = segmentLen;
        this.model = new Trie<CharBag>();
        this.sampleCount = 0;
    }

    /**
     * Method which trains the model on one sample by adding the char from the sample to
     * the address in the model specified by the string from the sample.
     * @param sample The sample for the data to train from
     */
    public void train(LetterSample sample) {
        CharBag node = this.model.get(sample.getSegment());
        if (node == null) {
            node = new CharBag();
            this.model.put(sample.getSegment(), node);
        }
        node.add(sample.getNextLetter());
        this.sampleCount += 1;
    }

    /**
     * Method which trains every possible sample from a given word.
     * @param word The string to be split into samples, each of which is then trained in the model
     */
    public void train(String word) {
        LetterSample [] samples = LetterSample.toSamples(word, this.segmentLen);
        for (LetterSample sample : samples) {
            train(sample);
        }
    }

    /**
     * Method which trains all strings in an array.
     * @param words The array of strings to be trained to the model
     */
    public void train(String[] words) {
        for (String word : words) {
            train(word);
        }
    }

    /**
     * Method which returns how many samples have been trained in this instance's model.
     * @return int The number of samples that have been trained n this model
     */
    public int getSampleCount() {
        return sampleCount;
    }

    /**
     * Method which uses the model to generate a pronounce gibberish word.
     * @return String the random gibberish generated by this model
     */
    public String generate() {
        StringBuilder nonsense = new StringBuilder();
        String sample;
        char next;
        while (true) {
            sample = nonsense.substring(Math.max(nonsense.length()-this.segmentLen, 0), nonsense.length());
            next = model.get(sample).getRandomChar();
            if (next == LetterSample.STOP) {
                break;
            }
            nonsense.append(next);
        }
        return nonsense.toString();
    }

}
